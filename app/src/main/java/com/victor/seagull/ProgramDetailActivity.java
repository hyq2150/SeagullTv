package com.victor.seagull;import android.annotation.TargetApi;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Color;import android.graphics.Point;import android.graphics.drawable.BitmapDrawable;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.design.widget.CollapsingToolbarLayout;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.ActivityCompat;import android.support.v4.app.ActivityOptionsCompat;import android.support.v4.widget.SwipeRefreshLayout;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.Toolbar;import android.text.TextUtils;import android.util.Log;import android.view.MenuItem;import android.view.Surface;import android.view.SurfaceView;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.widget.ImageView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.request.animation.GlideAnimation;import com.bumptech.glide.request.target.SimpleTarget;import com.mikepenz.foundation_icons_typeface_library.FoundationIcons;import com.mikepenz.iconics.IconicsDrawable;import com.victor.adapter.AlphaAnimatorAdapter;import com.victor.adapter.MeiPaiAdapter;import com.victor.adapter.ScaleInAnimatorAdapter;import com.victor.adapter.SlideInBottomAnimatorAdapter;import com.victor.adapter.SlideInLeftAnimatorAdapter;import com.victor.adapter.SlideInRightAnimatorAdapter;import com.victor.adapter.SwingBottomInAnimationAdapter;import com.victor.data.EpgInfo;import com.victor.data.MeiPaiContentData;import com.victor.data.MeiPaiData;import com.victor.module.DataObservable;import com.victor.module.HttpRequestHelper;import com.victor.module.Player;import com.victor.util.Constant;import com.victor.util.SharePreferencesUtil;import com.victor.view.ColorMovingTextView;import com.victor.view.HeartBubbleView;import java.util.ArrayList;import java.util.List;import java.util.Observable;import java.util.Observer;import jp.wasabeef.glide.transformations.CropCircleTransformation;public class ProgramDetailActivity extends BaseActivity implements Observer {    private String TAG = "ProgramDetailActivity";    private LinearLayoutManager linearLayoutManager;    private SurfaceView mSvVideo;    private ImageView mIvBackDrop;    private RecyclerView mRvVideo;    private ColorMovingTextView mCmtvTitle;    private FloatingActionButton mFabFullScreen;    private MeiPaiAdapter meiPaiAdapter;    private List<MeiPaiContentData> meiPaiContentDatas = new ArrayList<>();    private HttpRequestHelper mHttpRequestHelper;    private  int currentPage = 1;//当前页数    private int currentPlayPosition;//当前播放位置    private String meiPaiUrl = "";    private String headImgUrl = "";    private MeiPaiContentData meiPaiContentData;    private Player mPlayer;    Handler mHandler = new Handler(){        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case Player.PLAYER_PREPARING:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_PREPARED:                    break;                case Player.PLAYER_ERROR:                    break;                case Player.PLAYER_BUFFERING_START:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Player.PLAYER_BUFFERING_END:                    break;                case Player.PLAYER_PROGRESS_INFO:                    break;                case Player.PLAYER_COMPLETE:                    DataObservable.getInstance().setData(Constant.Action.PLAY_NEXT_MEIPAI_VIDEO);                    break;                case Constant.Msg.DRAW_HEART_BUBBLE:                    mHandler.removeMessages(Constant.Msg.DRAW_HEART_BUBBLE);                    if (mPlayer != null && mPlayer.getMediaPlayer() != null) {                        if (mPlayer.getMediaPlayer().isPlaying()) {                            return;                        }                    }                    drawHeartBubble();                    mHandler.sendEmptyMessageDelayed(Constant.Msg.DRAW_HEART_BUBBLE,200);                    break;                case Constant.Msg.REQUEST_SUCCESS:                    List<MeiPaiContentData> curPageDatas = (List<MeiPaiContentData>) msg.obj;                    meiPaiContentDatas.addAll(curPageDatas);                    if(curPageDatas.size() < Constant.PAGE_SIZE){                        meiPaiAdapter.setFooterVisible(false);                    } else {                        meiPaiAdapter.setFooterVisible(true);                    }                    meiPaiAdapter.notifyDataSetChanged();                    break;                case Constant.Msg.REQUEST_SUCCESS_NO_DATA:                    if (currentPage == 1) {                        meiPaiContentDatas.clear();                        meiPaiAdapter.setFooterVisible(false);                        meiPaiAdapter.notifyDataSetChanged();                    }                    Toast.makeText(getApplicationContext(),"服务器没有数据！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.REQUEST_FAILED:                    if (currentPage == 1) {                        meiPaiContentDatas.clear();                        meiPaiAdapter.setFooterVisible(false);                        meiPaiAdapter.notifyDataSetChanged();                    }                    Toast.makeText(getApplicationContext(),"访问服务器失败！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.PARSING_EXCEPTION:                    if (currentPage == 1) {                        meiPaiContentDatas.clear();                        meiPaiAdapter.setFooterVisible(false);                    }                    Toast.makeText(getApplicationContext(),"数据解析异常！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.NETWORK_ERROR:                    if (currentPage == 1) {                        meiPaiContentDatas.clear();                        meiPaiAdapter.setFooterVisible(false);                    }                    Toast.makeText(getApplicationContext(),"网络错误，请检查网络是否连接！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    if (currentPage == 1) {                        meiPaiContentDatas.clear();                        meiPaiAdapter.setFooterVisible(false);                    }                    Toast.makeText(getApplicationContext(),"访问服务器超时，请重试！",Toast.LENGTH_SHORT).show();                    break;                case Constant.Action.SHARE_MEIPAI:                    Intent intentshare = new Intent(Intent.ACTION_SEND);                    intentshare.setType("text/plain")                            .putExtra(Intent.EXTRA_SUBJECT, "分享")                            .putExtra(Intent.EXTRA_TEXT,"给你分享一个美拍视频：" + msg.obj);                    Intent.createChooser(intentshare, "分享");                    startActivity(intentshare);                    break;                case Constant.Action.PLAY_MEIPAI_VIDEO:                    play();                    break;            }        }    };    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_program_detail);        initialize();        initData();    }    private void initialize () {        DataObservable.getInstance().addObserver(this);        mHttpRequestHelper = new HttpRequestHelper(this);        mSvVideo = (SurfaceView) findViewById(R.id.sv_live);        mIvBackDrop = (ImageView) findViewById(R.id.iv_backdrop);        mRvVideo = (RecyclerView) findViewById(R.id.rv_channels);        mCmtvTitle = (ColorMovingTextView) findViewById(R.id.mtv_channel);        mFabFullScreen = (FloatingActionButton) findViewById(R.id.fab_fullscreen);        final Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        setSupportActionBar(toolbar);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        CollapsingToolbarLayout collapsingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);        collapsingToolbar.setTitle("搞笑我们是认真的！");        mPlayer = new Player(this,mSvVideo,mHandler,null);        linearLayoutManager = new LinearLayoutManager(this);//这里用线性显示 类似于listview        mRvVideo.setLayoutManager(linearLayoutManager);        meiPaiAdapter = new MeiPaiAdapter(this);        meiPaiAdapter.setMeiPaiContentDatas(meiPaiContentDatas);        meiPaiAdapter.setHeaderVisible(false);        meiPaiAdapter.setFooterVisible(false);//        mRvVideo.setAdapter(meiPaiAdapter);        ScaleInAnimatorAdapter animatorAdapter = new ScaleInAnimatorAdapter(meiPaiAdapter, mRvVideo);//        AlphaAnimatorAdapter animatorAdapter = new AlphaAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInBottomAnimatorAdapter animatorAdapter = new SlideInBottomAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInLeftAnimatorAdapter animatorAdapter = new SlideInLeftAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SlideInRightAnimatorAdapter animatorAdapter = new SlideInRightAnimatorAdapter(meiPaiAdapter, mRvVideo);//        SwingBottomInAnimationAdapter animatorAdapter = new SwingBottomInAnimationAdapter(meiPaiAdapter, mRvVideo);        mRvVideo.setAdapter(animatorAdapter);        mRvVideo.addOnScrollListener(new RecyclerView.OnScrollListener() {            @Override            public void onScrollStateChanged(RecyclerView recyclerView, int newState) {                super.onScrollStateChanged(recyclerView, newState);            }            @Override            public void onScrolled(RecyclerView recyclerView, int dx, int dy) {                super.onScrolled(recyclerView, dx, dy);                int lastVisibleItemPosition = linearLayoutManager.findLastVisibleItemPosition();                if (lastVisibleItemPosition + 1 == meiPaiAdapter.getItemCount()) {                    currentPage ++;                    requestMeiPaiDatas();                }            }        });    }    private void initData () {        meiPaiUrl = SharePreferencesUtil.getString(this,Constant.CURRENT_MEI_PAI_URL,"");        headImgUrl = SharePreferencesUtil.getString(this,Constant.HEAD_IMG_URL,"");        Glide.with(getApplicationContext()).load(headImgUrl).fitCenter().into(mIvBackDrop);        requestMeiPaiDatas();    }    private void requestMeiPaiDatas () {        if (mHttpRequestHelper != null) {            Bundle bundle = new Bundle();            bundle.putInt(Constant.CURRENT_PAGE_KEY,currentPage);            bundle.putString(Constant.CURRENT_MEI_PAI_URL,meiPaiUrl);            mHttpRequestHelper.sendRequestWithParms(Constant.Msg.MEIPAI_REQUEST, bundle);        }    }    /**     * 心形气泡动感效果     */    private void drawHeartBubble () {        int position[] = new int[2];        HeartBubbleView heartBubbleView = new HeartBubbleView(this);        mFabFullScreen.getLocationInWindow(position);        heartBubbleView.setStartPosition(new Point(position[0], position[1]));        ViewGroup rootView = (ViewGroup) this.getWindow().getDecorView();        rootView.addView(heartBubbleView);        int endPosition[] = new int[2];        mSvVideo.getLocationInWindow(endPosition);        heartBubbleView.setEndPosition(new Point(endPosition[0], endPosition[1]));// y 为0 到顶部，x为随机生成        heartBubbleView.startBeizerAnimation();    }    private void play () {        if (meiPaiContentData != null) {            String playUrl = meiPaiContentData.video;            if (!TextUtils.isEmpty(playUrl)) {                mCmtvTitle.setText(meiPaiContentData.caption);                mPlayer.playUrl(playUrl,false);            }        } else {            Log.e(TAG, "videoContentData == null or mPlayer == null");            mCmtvTitle.setText("");            mPlayer.playUrl(Constant.DEFAULT_PLAY_URL,false);        }    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;            default:                return super.onOptionsItemSelected(item);        }    }    @Override    protected void onDestroy() {        DataObservable.getInstance().deleteObserver(this);        super.onDestroy();    }    @TargetApi(Build.VERSION_CODES.LOLLIPOP)    @Override    protected void onResume() {        super.onResume();        Window window = getWindow();        window.setStatusBarColor(Color.TRANSPARENT);    }    @Override    public void update(Observable observable, Object data) {        if (data instanceof MeiPaiData) {            MeiPaiData meiPaiData = (MeiPaiData) data;            int status = meiPaiData.status;            Message msg = new Message();            switch (status) {                case Constant.Msg.REQUEST_SUCCESS:                    msg.what = Constant.Msg.REQUEST_SUCCESS;                    msg.obj = meiPaiData.meiPaiContentDatas;                    break;                case Constant.Msg.REQUEST_SUCCESS_NO_DATA:                    msg.what = Constant.Msg.REQUEST_SUCCESS_NO_DATA;                    break;                case Constant.Msg.REQUEST_FAILED:                    msg.what = Constant.Msg.REQUEST_FAILED;                    break;                case Constant.Msg.PARSING_EXCEPTION:                    msg.what = Constant.Msg.PARSING_EXCEPTION;                    break;                case Constant.Msg.NETWORK_ERROR:                    msg.what = Constant.Msg.NETWORK_ERROR;                    break;                case Constant.Msg.SOCKET_TIME_OUT:                    msg.what = Constant.Msg.SOCKET_TIME_OUT;                    break;            }            mHandler.sendMessage(msg);        } else if (data instanceof MeiPaiContentData) {            meiPaiContentData = (MeiPaiContentData)data;            mHandler.sendEmptyMessage(meiPaiContentData.action);        } else if (data instanceof Bundle) {            Bundle bundle = (Bundle) data;            int action = bundle.getInt(Constant.ACTION_KEY);            if (action == Constant.Action.SHARE_MEIPAI) {                String imgUrl = ((Bundle) data).getString(Constant.INTENT_DATA_KEY);                Message msg = new Message();                msg.what = Constant.Action.SHARE_MEIPAI;                msg.obj = imgUrl;                mHandler.sendMessage(msg);            }        } else if (data instanceof Integer) {            int action = (int) data;            if (action == Constant.Action.PLAY_NEXT_MEIPAI_VIDEO) {                currentPlayPosition += 1;                if (currentPlayPosition >= meiPaiContentDatas.size() + 1) {                    currentPlayPosition = 0;                }                if (currentPlayPosition < meiPaiContentDatas.size() + 1) {                    MeiPaiContentData meiPaiContentData = meiPaiContentDatas.get(currentPlayPosition - 1);                    meiPaiContentData.action = Constant.Action.PLAY_MEIPAI_VIDEO;                    meiPaiContentData.position = currentPlayPosition;                    DataObservable.getInstance().setData(meiPaiContentData);                }            }        }    }}