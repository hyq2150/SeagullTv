package com.victor.module;import android.content.Context;import android.os.Handler;import android.os.HandlerThread;import android.os.Message;import com.victor.util.Constant;import com.victor.util.HttpActions;import java.util.HashMap;/** * Created by victor on 2016/1/21. */public class HttpRequestHelper {    private String TAG = "HttpRequestHelper";    private Context mContext;    private Handler mRequestHandler;    private HandlerThread mRequestHandlerThread;    public HttpRequestHelper (Context context) {        mContext = context;        startRequestTask ();    }    private void startRequestTask (){        mRequestHandlerThread = new HandlerThread("HttpRequestTask");        mRequestHandlerThread.start();        mRequestHandler = new Handler(mRequestHandlerThread.getLooper()){            @Override            public void handleMessage(Message msg) {                switch (msg.what) {//                    case Constant.Msg.FUNNY_REQUEST://                        HashMap<Integer,Object> funnyMap = (HashMap<Integer, Object>) msg.obj;//                        String funnyUrl = (String) funnyMap.get(Constant.Msg.FUNNY_REQUEST);//                        HttpActions.requestFunnyAction(funnyUrl, mContext);//                        break;//                    case Constant.Msg.GIF_REQUEST://                        HashMap<Integer,Object> gifMap = (HashMap<Integer, Object>) msg.obj;//                        String gifUrl = (String) gifMap.get(Constant.Msg.GIF_REQUEST);//                        HttpActions.requestGifAction(gifUrl, mContext);//                        break;//                    case Constant.Msg.VOICE_REQUEST://                        HashMap<Integer,Object> voiceMap = (HashMap<Integer, Object>) msg.obj;//                        String voiceUrl = (String) voiceMap.get(Constant.Msg.VOICE_REQUEST);//                        HttpActions.requestVoiceAction(voiceUrl, mContext);//                        break;//                    case Constant.Msg.VIDEO_REQUEST://                        HashMap<Integer,Object> videoMap = (HashMap<Integer, Object>) msg.obj;//                        String videoUrl = (String) videoMap.get(Constant.Msg.VIDEO_REQUEST);//                        HttpActions.requestVideoAction(videoUrl, mContext);//                        break;//                    case Constant.Msg.BASE_REQUEST://                        HashMap<Integer,Object> baseMap = (HashMap<Integer, Object>) msg.obj;//                        String baseUrl = (String) baseMap.get(Constant.Msg.BASE_REQUEST);//                        HttpActions.requestBaseAction(baseUrl, mContext);//                        break;//                    case Constant.Msg.PICTURE_REQUEST://                        HashMap<Integer,Object> picMap = (HashMap<Integer, Object>) msg.obj;//                        String picUrl = (String) picMap.get(Constant.Msg.PICTURE_REQUEST);//                        HttpActions.requestPictureAction(picUrl, mContext);//                        break;//                    case Constant.Msg.MEIPAI_REQUEST://                        HashMap<Integer,Object> meiPaiMap = (HashMap<Integer, Object>) msg.obj;//                        Bundle meiPaiBundle = (Bundle) meiPaiMap.get(Constant.Msg.MEIPAI_REQUEST);//                        HttpActions.requestMeiPaiAction(mContext,meiPaiBundle);//                        break;                    case Constant.Msg.REQUEST_LIVE_EPG:                        HashMap<Integer,Object> epgMap = (HashMap<Integer, Object>) msg.obj;                        String epg = (String) epgMap.get(Constant.Msg.REQUEST_LIVE_EPG);                        HttpActions.requestLiveEpgAction(mContext,epg);                        break;//                    case Constant.Msg.MEIPAI_CATEGORY_REQUEST://                        HttpActions.requestMeiPaiCategoryAction(mContext);//                        break;                }            }        };    }    public void sendRequestWithParms (int Msg,Object requestData) {        HashMap<Integer, Object> requestMap = new HashMap<Integer, Object>();        requestMap.put(Msg, requestData);        Message msg = mRequestHandler.obtainMessage(Msg,requestMap);        mRequestHandler.sendMessage(msg);    }    public void sendRequest (int msg) {        mRequestHandler.sendEmptyMessage(msg);    }    public void onDestroy (){        if (mRequestHandlerThread != null) {            mRequestHandlerThread.quit();            mRequestHandlerThread = null;        }    }}